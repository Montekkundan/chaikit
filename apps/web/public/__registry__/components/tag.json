{
  "name": "tag",
  "dependencies": [
    "@react-three/fiber",
    "three",
    "@react-three/drei",
    "@react-three/rapier",
    "meshline",
    "leva"
  ],
  "devDependencies": [],
  "files": [
    {
      "name": "tag.jsx",
      "content": "\"use client\"\nimport * as THREE from 'three'\nimport { useEffect, useRef, useState } from 'react'\nimport { Canvas, extend, useThree, useFrame } from '@react-three/fiber'\nimport { useGLTF, useTexture, Environment, Lightformer } from '@react-three/drei'\nimport { BallCollider, CuboidCollider, Physics, RigidBody, useRopeJoint, useSphericalJoint } from '@react-three/rapier'\nimport { MeshLineGeometry, MeshLineMaterial } from 'meshline'\nimport { useControls } from 'leva'\n\nextend({ MeshLineGeometry, MeshLineMaterial })\nuseGLTF.preload('/models/chaitag.glb')\nuseTexture.preload('/models/textures/band.jpg')\n\nexport default function Tag() {\n  \n  return (\n    \n    <Canvas camera={{ position: [0, 0, 12], fov: 25 }}>\n      <ambientLight intensity={Math.PI} />\n      <Physics  interpolate gravity={[0, -40, 0]} timeStep={1 / 60}>\n        <Band />\n      </Physics>\n      <Environment background blur={0.75}>\n        <color attach=\"background\" args={['black']} />\n        <Lightformer intensity={2} color=\"white\" position={[0, -1, 5]} rotation={[0, 0, Math.PI / 3]} scale={[100, 0.1, 1]} />\n        <Lightformer intensity={3} color=\"white\" position={[-1, -1, 1]} rotation={[0, 0, Math.PI / 3]} scale={[100, 0.1, 1]} />\n        <Lightformer intensity={3} color=\"white\" position={[1, 1, 1]} rotation={[0, 0, Math.PI / 3]} scale={[100, 0.1, 1]} />\n        <Lightformer intensity={10} color=\"white\" position={[-10, 0, 14]} rotation={[0, Math.PI / 2, Math.PI / 3]} scale={[100, 10, 1]} />\n      </Environment>\n    </Canvas>\n   \n  )\n}\n\nfunction Band({ maxSpeed = 50, minSpeed = 10 }) {\n  const band = useRef(), fixed = useRef(), j1 = useRef(), j2 = useRef(), j3 = useRef(), card = useRef() // prettier-ignore\n  const vec = new THREE.Vector3(), ang = new THREE.Vector3(), rot = new THREE.Vector3(), dir = new THREE.Vector3() // prettier-ignore\n  const segmentProps = { type: 'dynamic', canSleep: true, colliders: false, angularDamping: 2, linearDamping: 2 }\n  const { nodes, materials } = useGLTF('/models/chaitag.glb')\n  const texture = useTexture('/models/textures/band.jpg')\n  const { width, height } = useThree((state) => state.size)\n  const [curve] = useState(() => new THREE.CatmullRomCurve3([new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()]))\n  const [dragged, drag] = useState(false)\n  const [hovered, hover] = useState(false)\n\n  useRopeJoint(fixed, j1, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\n  useRopeJoint(j1, j2, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\n  useRopeJoint(j2, j3, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\n  useSphericalJoint(j3, card, [[0, 0, 0], [0, 1.45, 0]]) // prettier-ignore\n\n  useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = dragged ? 'grabbing' : 'grab'\n      return () => void (document.body.style.cursor = 'auto')\n    }\n  }, [hovered, dragged])\n\n  useFrame((state, delta) => {\n    if (dragged) {\n      vec.set(state.pointer.x, state.pointer.y, 0.5).unproject(state.camera)\n      dir.copy(vec).sub(state.camera.position).normalize()\n      vec.add(dir.multiplyScalar(state.camera.position.length()))\n      ;[card, j1, j2, j3, fixed].forEach((ref) => ref.current?.wakeUp())\n      card.current?.setNextKinematicTranslation({ x: vec.x - dragged.x, y: vec.y - dragged.y, z: vec.z - dragged.z })\n    }\n    if (fixed.current) {\n      // Fix most of the jitter when over pulling the card\n      ;[j1, j2].forEach((ref) => {\n        if (!ref.current.lerped) ref.current.lerped = new THREE.Vector3().copy(ref.current.translation())\n        const clampedDistance = Math.max(0.1, Math.min(1, ref.current.lerped.distanceTo(ref.current.translation())))\n        ref.current.lerped.lerp(ref.current.translation(), delta * (minSpeed + clampedDistance * (maxSpeed - minSpeed)))\n      })\n      // Calculate catmul curve\n      curve.points[0].copy(j3.current.translation())\n      curve.points[1].copy(j2.current.lerped)\n      curve.points[2].copy(j1.current.lerped)\n      curve.points[3].copy(fixed.current.translation())\n      band.current.geometry.setPoints(curve.getPoints(32))\n      // Tilt it back towards the screen\n      ang.copy(card.current.angvel())\n      rot.copy(card.current.rotation())\n      card.current.setAngvel({ x: ang.x, y: ang.y - rot.y * 0.25, z: ang.z })\n    }\n  })\n\n  curve.curveType = 'chordal'\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping\n\n  return (\n    <>\n      <group position={[0, 4, 0]}>\n        <RigidBody ref={fixed} {...segmentProps} type=\"fixed\" />\n        <RigidBody position={[0.5, 0, 0]} ref={j1} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[1, 0, 0]} ref={j2} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[1.5, 0, 0]} ref={j3} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[2, 0, 0]} ref={card} {...segmentProps} type={dragged ? 'kinematicPosition' : 'dynamic'}>\n          <CuboidCollider args={[0.8, 1.125, 0.01]} />\n          <group\n            scale={2.25}\n            position={[0, -1.2, -0.05]}\n            onPointerOver={() => hover(true)}\n            onPointerOut={() => hover(false)}\n            onPointerUp={(e) => (e.target.releasePointerCapture(e.pointerId), drag(false))}\n            onPointerDown={(e) => (e.target.setPointerCapture(e.pointerId), drag(new THREE.Vector3().copy(e.point).sub(vec.copy(card.current.translation()))))}>\n            <mesh geometry={nodes.card.geometry}>\n              <meshPhysicalMaterial map={materials.ChaiCard.map} map-anisotropy={16} clearcoat={1} clearcoatRoughness={0.15} roughness={0.3} metalness={0.5} />\n            </mesh>\n            <mesh geometry={nodes.clip.geometry} material={materials.metal} material-roughness={0.3} />\n            <mesh geometry={nodes.clamp.geometry} material={materials.metal} />\n          </group>\n        </RigidBody>\n      </group>\n      <mesh ref={band}>\n        <meshLineGeometry />\n        <meshLineMaterial color=\"white\" depthTest={false} resolution={[width, height]} useMap map={texture} repeat={[-3, 1]} lineWidth={1} />\n      </mesh>\n    </>\n  )\n}"
    }
  ]
}