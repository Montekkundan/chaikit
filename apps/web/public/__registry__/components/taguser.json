{
  "name": "taguser",
  "dependencies": [
    "@react-three/fiber",
    "three",
    "@react-three/drei",
    "@react-three/rapier",
    "meshline",
    "leva"
  ],
  "devDependencies": [],
  "types": [
    "react",
    "nextjs"
  ],
  "files": [
    {
      "name": "tag-user.jsx",
      "content": "'use client';\r\nimport * as THREE from 'three';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { Canvas, extend, useThree, useFrame } from '@react-three/fiber';\r\nimport {\r\n  useGLTF,\r\n  useTexture,\r\n  Environment,\r\n  Lightformer,\r\n  RenderTexture,\r\n  Text3D,\r\n} from '@react-three/drei';\r\nimport {\r\n  BallCollider,\r\n  CuboidCollider,\r\n  Physics,\r\n  RigidBody,\r\n  useRopeJoint,\r\n  useSphericalJoint,\r\n} from '@react-three/rapier';\r\nimport { MeshLineGeometry, MeshLineMaterial } from 'meshline';\r\nimport { useControls } from 'leva';\r\n\r\nextend({ MeshLineGeometry, MeshLineMaterial });\r\nuseGLTF.preload('/models/chaitag.glb');\r\nuseTexture.preload('/models/textures/band.jpg');\r\n\r\nexport default function TagUser() {\r\n  return (\r\n    <Canvas camera={{ position: [0, 0, 12], fov: 25 }}>\r\n      <ambientLight intensity={Math.PI} />\r\n      <Physics interpolate gravity={[0, -40, 0]} timeStep={1 / 60}>\r\n        <Band />\r\n      </Physics>\r\n      <Environment background blur={0.75}>\r\n        <color attach='background' args={['black']} />\r\n        <Lightformer\r\n          intensity={2}\r\n          color='white'\r\n          position={[0, -1, 5]}\r\n          rotation={[0, 0, Math.PI / 3]}\r\n          scale={[100, 0.1, 1]}\r\n        />\r\n        <Lightformer\r\n          intensity={3}\r\n          color='white'\r\n          position={[-1, -1, 1]}\r\n          rotation={[0, 0, Math.PI / 3]}\r\n          scale={[100, 0.1, 1]}\r\n        />\r\n        <Lightformer\r\n          intensity={3}\r\n          color='white'\r\n          position={[1, 1, 1]}\r\n          rotation={[0, 0, Math.PI / 3]}\r\n          scale={[100, 0.1, 1]}\r\n        />\r\n        <Lightformer\r\n          intensity={10}\r\n          color='white'\r\n          position={[-10, 0, 14]}\r\n          rotation={[0, Math.PI / 2, Math.PI / 3]}\r\n          scale={[100, 10, 1]}\r\n        />\r\n      </Environment>\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nfunction Band({ maxSpeed = 50, minSpeed = 10 }) {\r\n  const band = useRef(), fixed = useRef(), j1 = useRef(), j2 = useRef(), j3 = useRef(), card = useRef() // prettier-ignore\r\n  const vec = new THREE.Vector3(), ang = new THREE.Vector3(), rot = new THREE.Vector3(), dir = new THREE.Vector3() // prettier-ignore\r\n  const segmentProps = {\r\n    type: 'dynamic',\r\n    canSleep: true,\r\n    colliders: false,\r\n    angularDamping: 2,\r\n    linearDamping: 2,\r\n  };\r\n  const { nodes, materials } = useGLTF('/models/chaitag.glb');\r\n  const texture = useTexture('/models/textures/band.jpg');\r\n  const { width, height } = useThree((state) => state.size);\r\n  const [curve] = useState(\r\n    () =>\r\n      new THREE.CatmullRomCurve3([\r\n        new THREE.Vector3(),\r\n        new THREE.Vector3(),\r\n        new THREE.Vector3(),\r\n        new THREE.Vector3(),\r\n      ])\r\n  );\r\n  const [dragged, drag] = useState(false);\r\n  const [hovered, hover] = useState(false);\r\n\r\n  useRopeJoint(fixed, j1, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\r\n  useRopeJoint(j1, j2, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\r\n  useRopeJoint(j2, j3, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\r\n  useSphericalJoint(j3, card, [[0, 0, 0], [0, 1.45, 0]]) // prettier-ignore\r\n\r\n  useEffect(() => {\r\n    if (hovered) {\r\n      document.body.style.cursor = dragged ? 'grabbing' : 'grab';\r\n      return () => void (document.body.style.cursor = 'auto');\r\n    }\r\n  }, [hovered, dragged]);\r\n\r\n  const textPositionX = -width * 0.0025;\r\n  const textPositionY = 1;\r\n  const textPositionZ = 0.05;\r\n  const textScaleFactor = width / 1130; // Scale factor based on a reference width\r\nconst textSize = 0.5 * textScaleFactor;\r\n\r\n  useFrame((state, delta) => {\r\n    if (dragged) {\r\n      vec.set(state.pointer.x, state.pointer.y, 0.5).unproject(state.camera);\r\n      dir.copy(vec).sub(state.camera.position).normalize();\r\n      vec.add(dir.multiplyScalar(state.camera.position.length()));\r\n      [card, j1, j2, j3, fixed].forEach((ref) => ref.current?.wakeUp());\r\n      card.current?.setNextKinematicTranslation({\r\n        x: vec.x - dragged.x,\r\n        y: vec.y - dragged.y,\r\n        z: vec.z - dragged.z,\r\n      });\r\n    }\r\n    if (fixed.current) {\r\n      // Fix most of the jitter when over pulling the card\r\n      [j1, j2].forEach((ref) => {\r\n        if (!ref.current.lerped)\r\n          ref.current.lerped = new THREE.Vector3().copy(\r\n            ref.current.translation()\r\n          );\r\n        const clampedDistance = Math.max(\r\n          0.1,\r\n          Math.min(1, ref.current.lerped.distanceTo(ref.current.translation()))\r\n        );\r\n        ref.current.lerped.lerp(\r\n          ref.current.translation(),\r\n          delta * (minSpeed + clampedDistance * (maxSpeed - minSpeed))\r\n        );\r\n      });\r\n      // Calculate catmul curve\r\n      curve.points[0].copy(j3.current.translation());\r\n      curve.points[1].copy(j2.current.lerped);\r\n      curve.points[2].copy(j1.current.lerped);\r\n      curve.points[3].copy(fixed.current.translation());\r\n      band.current.geometry.setPoints(curve.getPoints(32));\r\n      // Tilt it back towards the screen\r\n      ang.copy(card.current.angvel());\r\n      rot.copy(card.current.rotation());\r\n      card.current.setAngvel({ x: ang.x, y: ang.y - rot.y * 0.25, z: ang.z });\r\n    }\r\n  });\r\n\r\n  curve.curveType = 'chordal';\r\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n\r\n  return (\r\n    <>\r\n      <group position={[0, 4, 0]}>\r\n        <RigidBody ref={fixed} {...segmentProps} type='fixed' />\r\n        <RigidBody position={[0.5, 0, 0]} ref={j1} {...segmentProps}>\r\n          <BallCollider args={[0.1]} />\r\n        </RigidBody>\r\n        <RigidBody position={[1, 0, 0]} ref={j2} {...segmentProps}>\r\n          <BallCollider args={[0.1]} />\r\n        </RigidBody>\r\n        <RigidBody position={[1.5, 0, 0]} ref={j3} {...segmentProps}>\r\n          <BallCollider args={[0.1]} />\r\n        </RigidBody>\r\n        <RigidBody\r\n          position={[2, 0, 0]}\r\n          ref={card}\r\n          {...segmentProps}\r\n          type={dragged ? 'kinematicPosition' : 'dynamic'}\r\n        >\r\n          <CuboidCollider args={[0.8, 1.125, 0.01]} />\r\n          <group\r\n            scale={2.25}\r\n            position={[0, -1.2, -0.05]}\r\n            onPointerOver={() => hover(true)}\r\n            onPointerOut={() => hover(false)}\r\n            onPointerUp={(e) => (\r\n              e.target.releasePointerCapture(e.pointerId), drag(false)\r\n            )}\r\n            onPointerDown={(e) => (\r\n              e.target.setPointerCapture(e.pointerId),\r\n              drag(\r\n                new THREE.Vector3()\r\n                  .copy(e.point)\r\n                  .sub(vec.copy(card.current.translation()))\r\n              )\r\n            )}\r\n          >\r\n            <mesh geometry={nodes.card.geometry}>\r\n              <meshPhysicalMaterial\r\n                color=\"yellow\"\r\n                clearcoat={1}\r\n                clearcoatRoughness={0.15}\r\n                iridescence={1}\r\n                iridescenceIOR={1}\r\n                iridescenceThicknessRange={[0, 2400]}\r\n                metalness={0.5}\r\n                roughness={0.3}\r\n              >\r\n                <RenderTexture attach='map' height={2000} width={2000}>\r\n                  <Text3D\r\n                    bevelEnabled={false}\r\n                    bevelSize={0}\r\n                    font='/Geist_Regular.json'\r\n                    size={0.5}\r\n                    height={0.05}\r\n                    letterSpacing={-0.05}\r\n                    position={[textPositionX, textPositionY, textPositionZ]}\r\n                    rotation={[0, Math.PI, Math.PI]}\r\n                  >\r\n                    Montek\r\n                  </Text3D>\r\n                </RenderTexture>\r\n              </meshPhysicalMaterial>{' '}\r\n            </mesh>\r\n            <mesh\r\n              geometry={nodes.clip.geometry}\r\n              material={materials.metal}\r\n              material-roughness={0.3}\r\n            />\r\n            <mesh geometry={nodes.clamp.geometry} material={materials.metal} />\r\n          </group>\r\n        </RigidBody>\r\n      </group>\r\n      <mesh ref={band}>\r\n        <meshLineGeometry />\r\n        <meshLineMaterial\r\n          color='white'\r\n          depthTest={false}\r\n          resolution={[width, height]}\r\n          useMap\r\n          map={texture}\r\n          repeat={[-3, 1]}\r\n          lineWidth={1}\r\n        />\r\n      </mesh>\r\n    </>\r\n  );\r\n}\r\n"
    }
  ],
  "additionalFiles": []
}