{
  "name": "taguser",
  "dependencies": [
    "@react-three/fiber",
    "three",
    "@react-three/drei",
    "@react-three/rapier",
    "meshline",
    "leva"
  ],
  "devDependencies": [],
  "files": [
    {
      "name": "tag-user.jsx",
      "content": "'use client';\nimport * as THREE from 'three';\nimport { useEffect, useRef, useState } from 'react';\nimport { Canvas, extend, useThree, useFrame } from '@react-three/fiber';\nimport {\n  useGLTF,\n  useTexture,\n  Environment,\n  Lightformer,\n  RenderTexture,\n  Text3D,\n} from '@react-three/drei';\nimport {\n  BallCollider,\n  CuboidCollider,\n  Physics,\n  RigidBody,\n  useRopeJoint,\n  useSphericalJoint,\n} from '@react-three/rapier';\nimport { MeshLineGeometry, MeshLineMaterial } from 'meshline';\nimport { useControls } from 'leva';\n\nextend({ MeshLineGeometry, MeshLineMaterial });\nuseGLTF.preload('/models/chaitag.glb');\nuseTexture.preload('/models/textures/band.jpg');\n\nexport default function TagUser() {\n  return (\n    <Canvas camera={{ position: [0, 0, 12], fov: 25 }}>\n      <ambientLight intensity={Math.PI} />\n      <Physics interpolate gravity={[0, -40, 0]} timeStep={1 / 60}>\n        <Band />\n      </Physics>\n      <Environment background blur={0.75}>\n        <color attach='background' args={['black']} />\n        <Lightformer\n          intensity={2}\n          color='white'\n          position={[0, -1, 5]}\n          rotation={[0, 0, Math.PI / 3]}\n          scale={[100, 0.1, 1]}\n        />\n        <Lightformer\n          intensity={3}\n          color='white'\n          position={[-1, -1, 1]}\n          rotation={[0, 0, Math.PI / 3]}\n          scale={[100, 0.1, 1]}\n        />\n        <Lightformer\n          intensity={3}\n          color='white'\n          position={[1, 1, 1]}\n          rotation={[0, 0, Math.PI / 3]}\n          scale={[100, 0.1, 1]}\n        />\n        <Lightformer\n          intensity={10}\n          color='white'\n          position={[-10, 0, 14]}\n          rotation={[0, Math.PI / 2, Math.PI / 3]}\n          scale={[100, 10, 1]}\n        />\n      </Environment>\n    </Canvas>\n  );\n}\n\nfunction Band({ maxSpeed = 50, minSpeed = 10 }) {\n  const band = useRef(), fixed = useRef(), j1 = useRef(), j2 = useRef(), j3 = useRef(), card = useRef() // prettier-ignore\n  const vec = new THREE.Vector3(), ang = new THREE.Vector3(), rot = new THREE.Vector3(), dir = new THREE.Vector3() // prettier-ignore\n  const segmentProps = {\n    type: 'dynamic',\n    canSleep: true,\n    colliders: false,\n    angularDamping: 2,\n    linearDamping: 2,\n  };\n  const { nodes, materials } = useGLTF('/models/chaitag.glb');\n  const texture = useTexture('/models/textures/band.jpg');\n  const { width, height } = useThree((state) => state.size);\n  const [curve] = useState(\n    () =>\n      new THREE.CatmullRomCurve3([\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n      ])\n  );\n  const [dragged, drag] = useState(false);\n  const [hovered, hover] = useState(false);\n\n  useRopeJoint(fixed, j1, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\n  useRopeJoint(j1, j2, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\n  useRopeJoint(j2, j3, [[0, 0, 0], [0, 0, 0], 1]) // prettier-ignore\n  useSphericalJoint(j3, card, [[0, 0, 0], [0, 1.45, 0]]) // prettier-ignore\n\n  useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = dragged ? 'grabbing' : 'grab';\n      return () => void (document.body.style.cursor = 'auto');\n    }\n  }, [hovered, dragged]);\n\n  const textPositionX = -width * 0.0025;\n  const textPositionY = 1;\n  const textPositionZ = 0.05;\n  const textScaleFactor = width / 1130; // Scale factor based on a reference width\nconst textSize = 0.5 * textScaleFactor;\n\n  useFrame((state, delta) => {\n    if (dragged) {\n      vec.set(state.pointer.x, state.pointer.y, 0.5).unproject(state.camera);\n      dir.copy(vec).sub(state.camera.position).normalize();\n      vec.add(dir.multiplyScalar(state.camera.position.length()));\n      [card, j1, j2, j3, fixed].forEach((ref) => ref.current?.wakeUp());\n      card.current?.setNextKinematicTranslation({\n        x: vec.x - dragged.x,\n        y: vec.y - dragged.y,\n        z: vec.z - dragged.z,\n      });\n    }\n    if (fixed.current) {\n      // Fix most of the jitter when over pulling the card\n      [j1, j2].forEach((ref) => {\n        if (!ref.current.lerped)\n          ref.current.lerped = new THREE.Vector3().copy(\n            ref.current.translation()\n          );\n        const clampedDistance = Math.max(\n          0.1,\n          Math.min(1, ref.current.lerped.distanceTo(ref.current.translation()))\n        );\n        ref.current.lerped.lerp(\n          ref.current.translation(),\n          delta * (minSpeed + clampedDistance * (maxSpeed - minSpeed))\n        );\n      });\n      // Calculate catmul curve\n      curve.points[0].copy(j3.current.translation());\n      curve.points[1].copy(j2.current.lerped);\n      curve.points[2].copy(j1.current.lerped);\n      curve.points[3].copy(fixed.current.translation());\n      band.current.geometry.setPoints(curve.getPoints(32));\n      // Tilt it back towards the screen\n      ang.copy(card.current.angvel());\n      rot.copy(card.current.rotation());\n      card.current.setAngvel({ x: ang.x, y: ang.y - rot.y * 0.25, z: ang.z });\n    }\n  });\n\n  curve.curveType = 'chordal';\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n  return (\n    <>\n      <group position={[0, 4, 0]}>\n        <RigidBody ref={fixed} {...segmentProps} type='fixed' />\n        <RigidBody position={[0.5, 0, 0]} ref={j1} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[1, 0, 0]} ref={j2} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody position={[1.5, 0, 0]} ref={j3} {...segmentProps}>\n          <BallCollider args={[0.1]} />\n        </RigidBody>\n        <RigidBody\n          position={[2, 0, 0]}\n          ref={card}\n          {...segmentProps}\n          type={dragged ? 'kinematicPosition' : 'dynamic'}\n        >\n          <CuboidCollider args={[0.8, 1.125, 0.01]} />\n          <group\n            scale={2.25}\n            position={[0, -1.2, -0.05]}\n            onPointerOver={() => hover(true)}\n            onPointerOut={() => hover(false)}\n            onPointerUp={(e) => (\n              e.target.releasePointerCapture(e.pointerId), drag(false)\n            )}\n            onPointerDown={(e) => (\n              e.target.setPointerCapture(e.pointerId),\n              drag(\n                new THREE.Vector3()\n                  .copy(e.point)\n                  .sub(vec.copy(card.current.translation()))\n              )\n            )}\n          >\n            <mesh geometry={nodes.card.geometry}>\n              <meshPhysicalMaterial\n                color=\"yellow\"\n                clearcoat={1}\n                clearcoatRoughness={0.15}\n                iridescence={1}\n                iridescenceIOR={1}\n                iridescenceThicknessRange={[0, 2400]}\n                metalness={0.5}\n                roughness={0.3}\n              >\n                <RenderTexture attach='map' height={2000} width={2000}>\n                  <Text3D\n                    bevelEnabled={false}\n                    bevelSize={0}\n                    font='/Geist_Regular.json'\n                    size={0.5}\n                    height={0.05}\n                    letterSpacing={-0.05}\n                    position={[textPositionX, textPositionY, textPositionZ]}\n                    rotation={[0, Math.PI, Math.PI]}\n                  >\n                    Montek\n                  </Text3D>\n                </RenderTexture>\n              </meshPhysicalMaterial>{' '}\n            </mesh>\n            <mesh\n              geometry={nodes.clip.geometry}\n              material={materials.metal}\n              material-roughness={0.3}\n            />\n            <mesh geometry={nodes.clamp.geometry} material={materials.metal} />\n          </group>\n        </RigidBody>\n      </group>\n      <mesh ref={band}>\n        <meshLineGeometry />\n        <meshLineMaterial\n          color='white'\n          depthTest={false}\n          resolution={[width, height]}\n          useMap\n          map={texture}\n          repeat={[-3, 1]}\n          lineWidth={1}\n        />\n      </mesh>\n    </>\n  );\n}\n"
    }
  ]
}