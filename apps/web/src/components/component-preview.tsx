import React from "react";
import { CodeBlock } from "@/components/code-block";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";
import { previews } from "@/autogenerated/previews";
import { Dialog, DialogRoot } from "./ui/dialog";
import { Button } from "./ui/button";
import { ExternalLinkIcon } from "lucide-react";

type PreviewsKeys = keyof typeof previews;

export interface ComponentPreviewProps {
  name: PreviewsKeys;
  className?: string;
  containerClassName?: string;
  aspect?: "default" | "page";
  defaultExpanded?: boolean;
  preview?: string;
  expandable?: boolean;
}

export const ComponentPreview = ({
  name,
  className,
  containerClassName,
  aspect = "default",
  preview,
  expandable,
}: ComponentPreviewProps) => {
  // make it server component
  const component = React.useMemo(() => {
    const Component = previews[name]?.component;

    if (!Component) {
      return <p className="text-sm text-fg-muted">Component not found.</p>;
    }

    return <Component />;
  }, [name]);

  const code = React.useMemo(() => {
    const allCodeFiles = previews[name]?.code ?? [];

    if (allCodeFiles.length === 0) {
      return [];
    }

    return allCodeFiles.map((file) => ({
      ...file,
      code: file.code.replace("export default function", "function"),
    }));
  }, [name]);

  return (
    <div className={cn("overflow-hidden rounded-md border", containerClassName)}>
      <div className="relative">
        <ScrollArea
          className={cn("flex items-center justify-center bg-white dark:bg-black", {
            "max-h-[800px]": aspect === "default",
          })}
        >
          <div className="flex min-h-40 items-center justify-center px-4 py-8">
            <div className={cn("flex w-full items-center justify-center", className)}>
              {component}
            </div>
          </div>
        </ScrollArea>
        <DialogRoot>
          <Button 
            size="sm"
            aria-label="Expand preview"
            suffix={<ExternalLinkIcon />}
            className="absolute right-2 bottom-2"
          >
            Expand
          </Button>
          <Dialog overlayClassName="md:!max-w-4xl lg:!max-w-6xl xl:!max-w-screen-2xl" className="!p-0" type="modal" mobileType="modal">
            <div className="w-full h-[80vh] flex items-center justify-center">
              <ScrollArea
                className={cn("flex items-center justify-center bg-white dark:bg-black w-full h-full", {
                  "max-h-[900px]": aspect === "default",
                })}
              >
                {component}
              </ScrollArea>
            </div>
          </Dialog>
        </DialogRoot>
      </div>
      <CodeBlock
        files={code.map((file) => ({ fileName: file.title, code: file.code, lang: "tsx" }))}
        preview={preview}
        className={"w-full rounded-t-none border-x-0 border-b-0"}
        expandable={expandable}
      />
    </div>
  );
};
